* learn-from-hacking-team-leaks
这份学习笔记主要分为两部分，信息收集和学习教程。至于具体从415G的文件中
能hack到什么东西，我水平有限。试想415G的电影，你每天看10G，一个月也看不
完把，更不要说是意大利文/英文的文档。
* from wooyun
感谢乌云drops上的高质量的文章，但是本菜水平有限，这里只作罗列。
** [[http://drops.wooyun.org/papers/6968][Hacking Team攻击代码分析]]
** [[http://drops.wooyun.org/news/6977][人手一份核武器]]
** [[http://drops.wooyun.org/papers/6998][Hacking Team攻击代码分析Part 3 : Adobe Font Driver内核驱动权限提升漏洞]]
** [[http://drops.wooyun.org/papers/7025][简要分析Hacking Team 远程控制系统]]
** [[http://drops.wooyun.org/papers/7030][Hacking Team Android Browser Exploit代码分析]]
** [[http://drops.wooyun.org/papers/7031][Hacking Team 新 Flash 0day分析]]
** [[http://drops.wooyun.org/papers/7049][Hacking Team攻击代码分析Part 4: Flash 0day漏洞 CVE-2015-5122]]
** [[http://drops.wooyun.org/papers/7109][HackingTeam源码泄漏——语音监控分析]]
** [[http://drops.wooyun.org/papers/7116][Hacking Team攻击代码分析Part5 Adobe Font Driver内核权限提升漏洞第二弹+Win32k KALSR绕过漏洞]]
** [[http://drops.wooyun.org/papers/7156][RCS病毒样本分析]]
** [[http://drops.wooyun.org/papers/7199][Hacking Team系列 Flash 0Day分析]]
** [[http://drops.wooyun.org/tips/7195][Hacking Team不需越狱即可监控iOS用户]]
** [[http://drops.wooyun.org/tips/7196][无处不在的监控: Hacking Team:WP8 监控代码分析]]

* from reddit
从reddit的讨论组 [[https://www.reddit.com/r/HackedTeam/][Information about Hacking Team recent breach]]开始：
** [[https://tsyrklevich.net/2015/07/22/hacking-team-0day-market/][HACKING TEAM: A ZERO-DAY MARKET CASE STUDY]]
文章主要关注0day市场的交易情况。0day的价格，0day的作者。这里面可以得到
很多0day作者的思路，不仅仅是交易信息。还有这位作者的研究方法就是搜索维
基解密上的邮件列表，然后整理，这个是很好的研究这份泄密文件的思路。
*** 大量的邮件链接
比如：
Fuzzer results: Though Rosario's fuzzers found numerous crashing
test cases, like most fuzzer outputs few of them appeared
[[https://wikileaks.org/hackingteam/emails/emailid/508609][exploitable]]. One of the first crashes that looked exploitable was an
IE10 [[https://wikileaks.org/hackingteam/emails/emailid/226719][memory corruption]] that was [[https://wikileaks.org/hackingteam/emails/emailid/509902][patched]] within a week of its
discovery. Soon after, Rosario found a Firefox crash that looked
[[https://wikileaks.org/hackingteam/emails/emailid/514935][exploitable]] but only appeared to occur under [[https://wikileaks.org/hackingteam/emails/emailid/508958][memory pressure]]. Despite
months of analysis, Hacking Team was unable to turn this into a
working exploit. It was discovered in October of 2013 and VUPEN used
[[https://wikileaks.org/hackingteam/emails/emailid/472530][the same bug]] to win Pwn2Own in May of 2014.
*** 维基解密上的可查询邮件列表
都是链接到[[https://wikileaks.org/hackingteam/emails/][维基解密的公开邮件]] 那里，这份公开文件是可以快速查询的，其实现
在真的不用下那些邮件了。邮件有88.5g，分为三个文件夹还有
*** Keen Team的八卦
#+BEGIN_EXAMPLE
Correction 7/22/15: I've restated the Keen Team section to make it
clear that Hacking Team solicited them, not the other way around.
#+END_EXAMPLE
*** 结论
最后文章说，其实HT的业务并没有受影响，他的0day厂商也没有抛弃他。
#+BEGIN_EXAMPLE
this offers a convenient path forward for browser vendors to enact a
widespread shutdown of Adobe Flash next.
#+END_EXAMPLE
所以我也认为Flash的UAF虽然很严重，但是Flash一定会退出历史舞台的。我更喜
欢系统级别的漏洞，特别是国内很少有人研究的linux方面的，国内因为看雪的普
及，win方面的牛人真是太多了，可惜我很久不用win了，对win方面的东西没有感
觉了。
*** 一些0day作者的思路，比如VLC漏洞发现的过程
这篇文章其实很值得再看几次的，很多0day的发现者的思路，比如
#+BEGIN_EXAMPLE
Eugene offered to sell a VLC exploit; however, the trigger used a
playlist which wouldn't normally be opened with VLC, so he began to
develop another VLC exploit targeting videos.
#+END_EXAMPLE
VLC是我最喜欢的播放器，可以像youtube一样加速看视频。但是这个VLC的漏洞在
国内的文章中还没看到过。说明什么？也许这份泄密文档，我们不知道的，远多
于我们现在知道的。

** 伽利略远控系列 from 4armed.com & hyperionbristol.co.uk
*** [[https://www.4armed.com/blog/hacking-team-rcs-analysis-hacked-team/][HACKING TEAM RCS ANALYSIS – (OR IS THAT ‘HACKED TEAM’?)]]
**** 这里的宙斯代码，我找到了一篇据说是根据他写出的新木马的[[http://www.securityweek.com/zberp-new-trojan-created-leaked-zeus-carberp-source-code][文章]]。
#+BEGIN_EXAMPLE
Malicious actors will take the source code from this leak and use it
to create new tools (similar to the leak of the Zeus source code); as
defenders we therefore want to understand the capabilities of these
pieces of software, and how to create defences against them.
#+END_EXAMPLE
**** dongle就是加密狗，硬件保护器，wiki上说有些不需要插入USB。
#+BEGIN_EXAMPLE
Unfortunately the latest version of the RCS (9.6) requires a hardware
dongle in order to use. We’ll just have to settle with extracting the
raw files. After extracting the agent cores, we can see the RCS
supports a large variety of devices.
#+END_EXAMPLE
**** 确实，泄露的源码是不完整的，最新版本往往没有。
#+BEGIN_EXAMPLE
When we were compiling from source, we could just comment out this
check, but the leaked source code is only for version 9.2 of the
software. We’d like to use version 9.6 to explore any new features
added. Therefore we need to patch the windows agents in use.
#+END_EXAMPLE
**** 哈哈过了利用某种指针的魔法过了360的沙盒，国内黑产的最爱呀。
#+BEGIN_EXAMPLE
All of the agents check if they’re running in a virtualised
environment before continuing.
Of particular interest is the AntiCuckoo() function, which does some
pointer magic to confuse the Cuckoo Sandbox.
#+END_EXAMPLE
**** 远控自己要去掉的黑名单，有些我也没见过
#+BEGIN_EXAMPLE
There’s also a set of analysis tools that are blacklisted：
Explorer Suite$ # CFF Explorer Suite
IDA Pro v # IDA Pro vx.xx
Wireshark # Wireshark x.x.x
API Monitor # Api Monitor vx
VMWare Tools # Virtual Machine
WinPcap # Network analyzer
^Syser # Syser x.xx
\.NET Reflector # .NET Reflector Desktop
^PE Explorer # PE Explorer 1.xx Rx
^SysAnalyzer # SysAnalyzer 1.x
Python .* volatility # Volatilty
VirtualBox Guest Additions # Virtual Machine
Process Hacker # Process Hacker x.xx
Mandiant Red Curtain #
^OSForensics #
#+END_EXAMPLE
[[http://www.ntcore.com/exsuite.php][Explorer Suite]] [[https://github.com/dzzie/SysAnalyzer][SysAnalyzer]] 
上面我加上链接的这些东西，真是开眼界了。
比如这个SysAnalyzer可以对某个进程进行快照，然后比较两个快照的内容，这里
是[[https://www.youtube.com/watch?v%3D4twR8xtVWPk][演示视频]].
比如
#+BEGIN_EXAMPLE
The CFF Explorer was designed to make PE editing as easy as possible,
but without losing sight on the portable executable's internal
structure. This application includes a series of tools which might
help not only reverse engineers but also programmers. It offers a
multi-file environment and a switchable interface.
#+END_EXAMPLE
好强大！！ 
**** 总结
这篇文章主要介绍了伽利略远控三部分的分工。还有一些有趣的代码片段。
#+BEGIN_EXAMPLE
Scout, Soldier and Elite. Each level adds more features above the
previous level. This is consistent with threat actors such as Duqu,
who will install a small backdoor to validate that the target is
interesting before deploying the full espionage platform.
summarised below:
Scout:
Gather Device Information
Get Screenshots of device
Get Webcam photos
Get Social Networking Information
Soldier:
Gather Addressbooks Gmail, Yahoo Mail, Facebook, Twitter (Following).
Enumerate Applications
Gather Camera Data
Gather Clipboard Data
Gather Google Drive Data
Gather Twitter, Gmail, Yahoo (mail e chat), Facebook (Chat) messages
Gather IE, Chrome, Firefox passwords
Gather Photos
Get Position Data
Get Screenshots
Get Visited URLs from Firefox, TOR Browser
Upload/Download Files
Upgrade to Elite
And finally the ‘Elite’ agent
Gather Skype Calls
Access the Filesystem
Record Keystrokes
Gather email from Outlook/WindowsMail/LiveMail, Gmail webmail, Yahoo.
Gather audio from the microphone
Gather Financial Data
Gather mouse movements and clicks
Gather passwords from Internet Explorer, Firefox, Chrome, Opera, Outlook, PalTalk, Thunderbird, Trillian.
#+END_EXAMPLE
*** [[https://www.4armed.com/blog/hacking-teams-galileo-rcs-repurposing-espionage-software/][HACKING TEAM’S GALILEO RCS – REPURPOSING ESPIONAGE SOFTWARE]]
这篇文章分析对象是Scout，
**** 首先是去除反病毒限制
#+BEGIN_EXAMPLE
The first thing we need to do is disable the Anti-virtual machine
protections, as we’d like to test the setup using a virtual Windows
target. The implant detects VirtualBox, VMWare and the Cuckoo malware
sandbox, as well as other sandboxes such as Comodo's – if it detects
these then it exits without running.
#+END_EXAMPLE
[[http://www.cuckoosandbox.org/][Cuckoo malware sandbox]]的沙盒，有是没听说过的，还是开源的，最新的文档在[[http://docs.cuckoosandbox.org/en/latest/][这里]]。
这个[[https://help.comodo.com/topic-72-1-451-4768-.html][Comodo]] (科莫多)的也没用过，好像是win平台的。
**** 通过配置文件确定关键参数
#+BEGIN_EXAMPLE
The implant is normally compiled once, and then key parameters are
binary patched to a specific deployment. These parameters are
described in the ‘binpatched_vars.h’ header file.
#+END_EXAMPLE
**** 改变服务器地址，分析通讯协议
#+BEGIN_EXAMPLE
So we can change the server to re-direct to one that we own, and we
can ensure that this is the only server that the agent will connect to
(Which is good for our piece of mind).  The agent connects to it’s
control server via HTTP, so let’s listen on our control server on
port 80.
#+END_EXAMPLE
**** 这张[[http://hyperionbristol.co.uk/wp-content/uploads/2015/07/auth_proto.png][图片]] 是验证身份的过程。
#+BEGIN_EXAMPLE
So the next thing to do is to decode the protocol. Data sent by the
implant is AES encrypted, then base-64 encoded before being sent by
HTTP POST to “/index.php”. Before the agent sends any useful data
however, it performs an authentication handshake with the server.

The encryption is done using AES in CBC mode, but the initialisation
vector (IV) is always set to 16 zeros – This means the protocol is
vulnerable to replay attacks, and possible known-plaintext decryption
attacks.
#+END_EXAMPLE
哈哈果然是安全人员。
**** 收集计算机基本信息（软件版本等），一个example
#+BEGIN_EXAMPLE
Once we’ve authenticated to the implant, the implant then sends us a
device information packet, which contains a large amount of useful
information, as shown below:
== System Info Evidence Viewer ==
=================================================

Enter Build ID {$}->
{*} – Getting system info for Implant RCS_0000001167
CPU: 1 x Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz
Architecture: (64bit)
RAM: 639MB free / 1023MB total (37% used)
HardDisk: 4637MB free / 25497MB total

Windows Version: Microsoft Windows 7 Professional (Service Pack 1) (64bit)
Registered to: #REDACTED USERNAME# {}
Locale: en_GB ((UTC) Dublin, Edinburgh, Lisbon, London)

User Info: Mostafa [ADMIN]
SID: S-1-5-21-1825426571-686220015-1722707009-1000

Application List (x86):
Adobe AIR (18.0.0.180)
RCS Console (15.03.21)
Python 2.7 – SendKeys 0.3 (0.3)
RCS (2015032101)
Windows Live Essentials (16.4.3528.0331)
Microsoft Visual C++ 2010 x86 Redistributable – 10.0.30319 (10.0.30319)
Python 2.7 (2.7.150)
Java(TM) SE Runtime Environment 6 (1.6.0.0)
Microsoft Visual C++ 2008 Redistributable – x86 9.0.30729.17 (9.0.30729)
Adobe Reader XI (11.0.07) (11.0.07)

ApplicationList (x64):
Microsoft .NET Framework 4 Client Profile (4.0.30319)
Microsoft .NET Framework 4 Extended (4.0.30319)
Oracle VM VirtualBox Guest Additions 4.3.10 (4.3.10.0)
Microsoft Visual C++ 2008 Redistributable – x64 9.0.30729.17 (9.0.30729)
Microsoft Silverlight (5.1.20513.0)
Microsoft Visual C++ 2010 x64 Redistributable – 10.0.30319 (10.0.30319)
#+END_EXAMPLE
我去不要太详细。
**** 发送加密的截屏，密钥在前面的配置文件中
#+BEGIN_EXAMPLE
After this, the implant then sends encrypted screenshots – these are
encrypted with the ENCRYPTION_KEY variable declared in the
“binpatched_vars.h” header file.
#+END_EXAMPLE
**** 服务端能将截图制作成动画，[[http://hyperionbristol.co.uk/uploads/RCS_0000001167_1436742564.91.gif][一个example]]
#+BEGIN_EXAMPLE
On the server side, we can stitch these together to make an animated
‘video’ of the target’s desktop, allowing us to determine key
information before we commit more complicated tools, this is shown
below (The GIF is 4.5Mb in size, so it may take a while to load)
#+END_EXAMPLE
*** [[http://hyperionbristol.co.uk/galileo-rcs-installing-the-entire-espionage-platform/][Galileo RCS – Installing the entire espionage platform]]
这篇破文，因为有源码，所以直接从源码和运行日志中得到了加密狗Dongle的信
息，连逆向都没做绕过了时间限制和加密狗，漂亮。
**** 去除软件许可限制，得以安装完整的后端系统，就像一个HT的客户一样。
#+BEGIN_EXAMPLE
After defeating the license restrictions, we’re able to install the
full backend system, and operate it as if we were a HackingTeam
customer.
#+END_EXAMPLE
**** 很有意思，只要将license文件的:serial字段改称从时间改成off，就可以绕过了，囧
#+BEGIN_SRC ruby
  if lic[:serial] != 'off'
        puts "Checking for hardware dongle..."
        # get the version from the dongle (can rise exception)
        info = Dongle.info
        puts "Dongle info: " + info.inspect
        raise "Invalid License File: incorrect serial number (#{lic[:serial]}) #{info[:serial]} is needed" 
        if lic[:serial] != info[:serial]
      else
        puts "Hardware dongle not required..."
      end
#+END_SRC
**** 还是不行，弹出“非法的license”的提示，查看日志
**** 因为有源码，所以直接在源码里面输出了的加密狗的信息
#+BEGIN_SRC ruby
# print the dongle infos
pp Dongle.info if license[:serial] != 'off'
#+END_SRC 
*** [[https://www.4armed.com/blog/galileo-rcs-running-espionage-operation/][GALILEO RCS – RUNNING AN ESPIONAGE OPERATION]]
[[https://www.4armed.com/wp-content/uploads/2015/07/RCSarch.png][RCS Architecture from the leaked Sysadmin manual]]这张软件架构图非常清晰。
下面的文章没有将截图的链接带上，因为如果要操作还是要看原文的。这些标题只不过起
到注释的作用。本篇主要讲了怎么搭建RCS的环境。
**** 介绍Master,Collector,Anonymizer节点作用
#+BEGIN_EXAMPLE
The main element is the master node, which stores evidence in a
MongoDB instance, and handles agent deployments and building. The
‘Collector’ node is the interface between the master node and the
chain of ‘Anonymizers’ that lead to the agent itself. The anonymisers
create a chain of connections, obfuscating the location and identity
of the final Collector node.
#+END_EXAMPLE
**** Anoymizer作为HTTP代理运行于CentOS
#+BEGIN_EXAMPLE
The anonymiser essentially acts as an HTTP proxy, and runs on
CentOS. We can therefore setup a virtual machine in our Galileo Lab
and provision it as an Anonymiser.
#+END_EXAMPLE
**** 主要介绍部署Anoymizer和Collector的过程
#+begin_example
To provision the Anonymiser, we create a new anonymiser on the
console, then export the installer. This creates a zip file which we
copy to the CentOS instance. After un-zipping it, we have an ‘install’
file, which we can run with:
 sh install
We then need to either disable the default iptables firewall, or
create an exception. As this is just in my lab, I ran:
 service iptables stop
Once we’ve done this, we then go back to our console and drag the
Anonymiser onto the Collector to create a chain. Clicking ‘Apply
Configuration’ then pushes this to the collector and the anonymiser,
setting up the chain.
#+end_example
**** 去除反虚拟机的限制
#+begin_example
The first stage is identifying where the base executables that the
backend uses are located. When the system is installed, the ‘cores’
are extracted to ‘C:\RCS\DB\cores’. Each of these is a zip file
containing the base images for all of the various agents.
When the master node starts it checks to see if there are any files in
this directory, and loads them into the MongoDB database if
so. Therefore if we want to update the windows core, we need to create
a new ‘windows.zip’ containing our patched agents that will run inside
VMs, and then load them into the master node.
The ‘windows.zip’ has the following contents:

Volume in drive G is VBOX_downloads_desktop
Volume Serial Number is 8A93-92DF

Directory of G:\Hacked Team\FAE DiskStation\2. DELIVERY\2.3. Software
(releases)\RCS 9.6 (stable)\Product\Server\cores\windows
10/07/2015 13:02 .
10/07/2015 13:02 ..
11/01/2011 06:02 11,264 aplib.dll
08/04/2010 10:18 166,400 AsmJit.dll
27/11/2014 15:55 1,082 ca.cer
27/10/2011 16:15 208,896 codec
16/12/2013 13:03 346,624 cooker.exe
19/03/2015 17:20 669,184 core
16/01/2014 12:21 82,432 core64
16/12/2013 13:02 1,780,736 dropper.exe
23/03/2015 17:28icons
20/05/2013 17:49 93,696 packer32.exe
12/03/2013 05:07 114,688 packer64.exe
19/10/2012 10:59 17,920 rcedit.exe
27/03/2015 14:55 245,248 scout
27/03/2015 11:53 6,486 scout_names.rb
03/09/2014 15:03 167 scout_packer.rb
10/03/2015 15:12 4 scout_version
08/02/2010 12:30 314,368 SignTool.exe
15/11/2013 08:11 1,064,448 silent
19/03/2015 17:21 649,216 soldier
03/09/2014 15:03 138 soldier_packer.rb
05/08/2014 11:35 6,190 soldier_upgrade
12/03/2015 12:00 6 soldier_version
27/10/2011 16:15 258,048 sqlite
19/10/2012 10:59 110,592 verpatch.exe
18/02/2015 12:49 10 version
03/07/2014 23:22 526 VMProtect.key
04/07/2014 00:31 4,427,848 VMProtect_Con.exe
28/03/2014 12:55 412,160 VMProtect_Ext.dll
28/11/2014 16:11 333 vmprotect_project.vmp
16/12/2014 11:11 6,039 windows.pfx
29 File(s) 10,994,749 bytes
3 Dir(s) 54,780,149,760 bytes free
#+end_example
**** 确定scout和soldier是要patch的image 
: It looks like ‘scout’ and ‘soldier’ are the two base images that we
: want to patch.
: We have the source code for the ‘AntiVM()’ function, but we need to
: find what it looks like in the compiled code. Starting with the scout
: agent, we can open it up in IDA (A reverse engineering tool) and find
: the code segments that correspond to the AntiVM code.
**** 通过分析源码，确定查询字符串定位汇编的地址
#+begin_example
The ‘AntiVBox’ and ‘AntiVMware’ functions both use WMI queries in
order to identify a virtual environment. These queries use the
‘CoCreateInstance’, ‘CoInitialise’ and ‘CoSetProxyBlanket’ functions
from the Windows API.
In addition, we have these string arrays containing the actual queries
to be run; The ‘AntiVMWare’ query is: ‘SELECT * FROM Win32_Bios’, and
the ‘AntiVBox’ query is: ‘SELECT * FROM Win32_PnPEntity’. These aren’t
stored as strings though, but as character arrays, which makes it
slightly harder to locate them in IDA.
However, we can still narrow it down, and eventually find the code
segments that load and execute these queries.
Tracing backwards, this allows us to identify the whole ‘AntiVM’
function:
So if virtualisation is detected, then the value of EAX is set to 1,
otherwise it’s set to zero (XOR-ing anything with itself results in
zero).
It’s now fairly trivial to locate the specific assembly instruction
‘mov eax, 1′ and patch it instead to be ‘mov eax, 0′, so that the
function always returns zero.
So we’ve now patched the scout implant (finally…), but what about the
next level up?
#+end_example
这家伙主要用Immunity Debugger的，国内一般用OD。
**** 同理，patch了Soldier
: The ‘Soldier’ agent actually shares the same code as the scout to
: detect virtual environments. The compiled code is slightly different
: however, probably due to a compiler optimisation.
: Whereas the scout sets EAX to 1 using ‘mov eax, 1′, the soldier
: instead sets EAX to zero, then increments it by one (‘INC
: EAX’). Regardless, we can still patch the function to always return
: zero by replacing the ‘INC EAX’ with a ‘NOP’ (No-operation)
: instruction. This does nothing, and leaves EAX set to zero.
**** 打包回去,加载成功
#+begin_example
Now we need to load these updated agents into the database. We copy
our updated ‘scout’ and ‘soldier’ files into ‘windows.zip’, then copy
that into ‘C:\RCS\DB\cores’. Lo and behold, the next time the database
starts our updated core is loaded: 
2015-07-20 12:26:49 +0100 [INFO]: Loading cores into db… 
2015-07-20 12:26:49 +0100 [INFO]: Loading core: windows… 
2015-07-20 12:26:49 +0100 [INFO]: Load core: ‘windows’ |
version 2015032101 | sha1 1daaeece8c9a7c624b9f26147562b052fb691e44 
So after all of that work, we should be able to run an agent on a
virtual machine to try out its features. We first create an
‘Operation’ that will contain all of our targets.
#+end_example

**** 后端创建“工厂”，点击选项就能配置“生成”远控客户端
#+begin_example
We then create a ‘Factory’ to build our agents. This allows us to
configure what features we want enabled, as well as the frequency of
call-backs.
Once we’ve decided on our configuration, we then click ‘Build’ and are
presented by this mildly amusing pop-up:
Clicking on, we get to choose what the infection vector will be
(i.e. how the agent will be executed). Each of these vectors is a post
on its own, so for the moment we’re just going to generate an
executable to be run by the victim (i.e. Us).
Clicking ‘create’ gives us an executable on our local machine under
‘RCS Downloads’.
#+end_example
**** scout能收集信息和截图
#+begin_example
We can then copy this to our target machine and run it, installing the
implant. As mentioned previously, the ‘scout’ implant (which this
agent is) sends back device information and screenshots so that the
operator can determine if the target is valid or not. When the implant
calls home, a new ‘target’ is created in the operation, allowing
viewing of evidence obtained from that agent. After we’ve decided that
the target is valid, we can upgrade the agent to allow collection of
much more data.
All of the evidence is displayed in an easy-to-view format. Some
examples of evidence are shown below, including keystroke logs and
device information.
#+end_example
**** OCR识别截图中的文字
: Another interesting feature is Optical Character Recognition
: (OCR). This aims to recognise text in images and convert it into
: actual text. This feature allows recognition of text in
: screenshots. This is also coupled with a translation feature, allowing
: the translation of text in screenshots.
**** 总结
: So to wrap up, we’ve managed to deploy an operational infrastructure,
: patch the implants so they’ll run in our virtual lab and finally run a
: mock operation on our ‘targets’ and gathered intelligence. Using all
: of this information, we can start to put together a picture of what an
: attack using this toolset would look like, and how we could defend
: against it.
*** [[https://www.4armed.com/blog/hacking-teams-killswitch-disabling-galileo-rcs-remotely-silently/][HACKING TEAM’S KILLSWITCH – DISABLING THE GALILEO RCS REMOTELY AND SILENTLY]]
This time we’re looking at an embedded ‘kill switch’ within the system
that allows Hacking Team to remotely disable a client’s software.
主要证实了[[http://arstechnica.co.uk/security/2015/07/hacking-team-may-not-have-had-a-backdoor-but-it-could-kill-client-installs/][Hacking Team may not have had a backdoor, but it could kill remote clients]]
这篇报道，即HT的软件确实存在后门，能远程关闭。文章主要对http_controller.rb和rcs-kill.rb分析。
留个坑把，要动手操作才有意义。
**** killswitch通过切断Collector来禁止客户端的任何操作
The ‘vulnerability’ is in the ‘Collector’, the server that acts as the
bridge between the Master database and the targets. The Killswitch
disables this node, preventing any of the targets from calling home;
effectively killing all operations for that client.
** 其他项
reddit好八卦，我喜欢，FBI某位兄弟曾经发邮件叫HT将他移出广告列表。这个据
说是[[%E6%8E%A8%E8%8D%90%E4%B9%A6%E5%8D%95][推荐书单]]，福利！还有就是一些政府的八卦，抱怨用纳税人的钱如监视纳税
人的。不过HT申明，他的客户只有南韩没有北朝鲜等。
rootkit相关，下面的趋势科技的文献比reddit的更好。Flash的漏洞方面，乌云上面
的360安全团队的文章更好，可能国外的更详细易懂也不一定。
读不懂，不过这种文章都是动手才能看懂的。
* @daige 评论里面的[[http://countuponsecurity.com/2015/07/24/hacking-team-arsenal-of-cyber-weapons/][这份摘要]]
這是一篇總結性的文章，基本是链接+引用其他开头作爲的摘要,这份列表很多漏洞方面的文章。
但是有重复，而且我也不太关系Flash方面的漏洞。所以只列了rootkit相关的。
** [[http://blog.trendmicro.com/trendlabs-security-intelligence/hacking-team-uses-uefi-bios-rootkit-to-keep-rcs-9-agent-in-target-systems/][Hacking Team Uses UEFI BIOS Rootkit to Keep RCS 9 Agent in Target Systems]]
*** Hacking Team使用Bootkit！针对Insyde BIOS,好像也对AMI BIOS有效。
: Hacking Team uses a UEFI BIOS rootkit to keep their Remote Control
: System (RCS) agent installed in their targets’ systems. This means
: that even if the user formats the hard disk, reinstalls the OS, and
: even buys a new hard disk, the agents are implanted after Microsoft
: Windows is up and running.
: They have written a procedure specifically for Insyde BIOS (a very
: popular BIOS vendor for laptops).  However, the code can very likely
: work on AMI BIOS as well. 
*** 虽然HT的幻灯片说要硬件插入才能安装，但不能排除远程安装的可能性
进攻者进入系统，重启进去UEFI的shell,dump出BIOS,安装BIOS bootkit,然后重
启目标系统。
: A Hacking Team slideshow presentation claims that successful infection
: requires physical access to the target system; however, we can’t rule
: out the possibility of remote installation. An example attack scenario
: would be: The intruder gets access to the target computer, reboots
: into UEFI shell, dumps the BIOS, installs the BIOS rootkit,reflashes
: the BIOS, and then reboots the target system.
*** 安装中，会拷贝三部分Ntfs.mod，Rkloader.mod，dropper.mod
: In installation, three modules are first copied from an external
: source (this might be from a USB key with UEFI shell) to a file volume
: (FV) in the modified UEFI BIOS. Ntfs.mod allows UEFI BIOS to
: read/write NTFS file. Rkloader.mod then hooks the UEFI event and calls
: the dropper function when the system boots. The file dropper.mod
: contains the actual agents, which have the file name scout.exe and
: soldier.exe.
*** 防范措施
: Make sure UEFI SecureFlash is enabled
: Update the BIOS whenever there is a security patch
: Set up a BIOS or UEFI password
** [[http://www.intelsecurity.com/advanced-threat-research/blog.html][Advanced Threat Research]]
这篇文章值得深入研究，留个坑把。前面从源码维度介绍rkRootkit做了什么。然
后是硬件Rootkit检测工具[[https://cansecwest.com/slides/2014/Platform%2520Firmware%2520Security%2520Assessment%2520wCHIPSEC-csw14-final.pdf][CHIPSEC]].
包括检测SPI Flash 保护，得到感染的证据。不过好消息是我还没看到linux版本的。
*** reference
[[http://www.intelsecurity.com/advanced-threat-research/security-system-firmware.html][BIOS / UEFI Firmware]]
[[http://www.c7zero.info/stuff/Windows8SecureBoot_Bulygin-Furtak-Bazhniuk_BHUSA2013.pdf][A Tale of One Software Bypass ofWindows 8 Secure Boot]]
[[https://conference.hitb.org/hitbsecconf2013kul/materials/D1T1%2520-%2520Kallenberg,%2520Kovah,%2520Butterworth%2520-%2520Defeating%2520Signed%2520BIOS%2520Enforcement.pdf][Defeating Signed BIOS Enforcement]]
[[https://bromiumlabs.files.wordpress.com/2015/01/speed_racer_whitepaper.pdf][Speed Racer: Exploiting an Intel Flash Protection Race Condition]]
[[https://github.com/hackedteam/vector-edk][HT UEFI开发代码]]
* 入门的tutorials
** UAF
UAF的一篇简单教程，适合我等小白用户
[[http://garage4hackers.com/content.php?r%3D143-Beginners-Guide-to-Use-after-free-Exploits-IE-6-0-day-Exploit-Development][Beginners Guide to "Use after free Exploits #IE 6 0-day #Exploit Development"]]
** linux-insides
下面这本[[http://0xax.gitbooks.io/linux-insides/content/index.html][linux-insides]] 讲linux的书，天天刷我屏，从各种不同渠道。
: The goal is simple - to share my modest knowledge about the internals
: of the linux kernel and help people who are interested in linux kernel
: internals, and other low-level subject matter.
** exploit-develop
这个[[https://expdev-kiuhnm.rhcloud.com/2015/05/11/contents/][Exploit Development Course]]教程貌似被推荐烂了。
** phrack
当然，怎么能少了这个,竟然讲android的rootkit,这个教程要从reference看起，巨坑。
http://phrack.org/issues/68/1.html
** rootkit
linux-rootkit-hack, 我更新在[[https://github.com/sancao2/reading-notes/blob/master/linux-rootkit-hack.org][linux-rootkit-hack.org]] 了。
截图当作目录发在知乎这个问题的答案[[http://www.zhihu.com/question/33695415/answer/57179705?group_id%3D610826434814746624][这里]] 下面，欢迎大牛打脸。
